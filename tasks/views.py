from typing import Callable
from datetime import datetime, timedelta
import math
import re

from rich.console import Group, Console
from rich.padding import Padding
from rich.prompt import Prompt
from rich.style import Style
from rich.text import Text

from settings import settings
from tasks.db import TaskManagerJSON
from tasks.models import Task
from utils import const
from utils.funcs import make_panel, choices_options


class TaskCLI:
    def __init__(self):
        self.console = Console()
        self.manager = TaskManagerJSON()
        self.limited = settings.limited
        self.options = {
            # "0": self.back,
            "102": ("–†–∞–∑–±–∏—Ç—å –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", self.present_cats),
            "103": ("–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ", self.present_not_comple)
        }

    def get_tasks(self) -> None:
        """
        –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏, —Å —Ä–∞–∑–±–∏–µ–Ω–∏–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        –¥–æ –∫–æ–ª-—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—ã–π —É–∫–∞–∑–∞–Ω –≤ `settings.settings`.
        –¢–∞–∫–∂–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–¥, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –ª–∏–±–æ
        –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É, –ª–∏–±–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –æ–ø—Ü–∏–µ–π.
        :return:
        """
        while True:
            self.console.clear()
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
            tasks = self.manager.get_tasks()
            choice = self.repr_tasks(tasks=tasks, title="–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á")
            t_option = self.options.get(choice)
            if choice == "":
                return
            elif t_option is not None:
                title, option = t_option
                option()

    def paginate(self, tasks: list) -> iter:
        """
        –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–≥–æ —Ä–∞–∑–±–∏–µ–Ω–∏—è –∑–∞–¥–∞—á.

        :return: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ø–∏—Å–∫–æ–≤ —Å –∑–∞–¥–∞—á–∞–º–∏.
        """
        if not tasks or self.limited <= 0:
            yield []  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –µ—Å–ª–∏ –∑–∞–¥–∞—á –Ω–µ—Ç –∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            return

        count_pages = math.ceil(len(tasks) / self.limited)
        for page in range(count_pages):
            start = page * self.limited
            end = start + self.limited
            yield tasks[start:end]


    def abb_repr_task(self, num: int, task: Task) -> Group:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏.
        :param num:
        :param task:
        :return:
        """
        # sos - —ç—Ç–æ –º–∞—Ä–∫–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π
        # –æ–ø–æ–≤–µ—â–∞–µ—Ç –æ —Ç–æ–º, —á—Ç–æ –≤—Ä–µ–º—è –ª–∏–±–æ –∏—Å—Ç–µ–∫–ª–æ,
        # –ª–∏–±–æ –æ—Å—Ç–∞–ª–æ—Å—å 7 —á–∞—Å–æ–≤ –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è.

        sos = Text(
            "SOS",
            style=Style(
                bgcolor="red"
            )
        )

        title = Text.assemble(
            (f"{num}) ", "dark_blue"),
            (f"{task.title} ", "blue3"),
            style=Style(

            )
        )
        if task.timing() < timedelta(hours=7):
            title.append(
                sos
            )


        row1 = Text.assemble(
            ("ID:", "bold bright_black"),
            (f"{task.id}", "white"), "\t",
            ("–°—Ç–∞—Ç—É—Å: ", "bold bright_black"),
            (f"{task.repr_status()}", "white")
        )
        row2 = Text.assemble(
            "\t",
            ("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ", "bold bright_black"),
            (f"{task.priority}", "white")
        )

        task = Group(
            title,
            row1,
            row2
        )
        return task

    def delete_task(self, task: Task) -> None:
        """ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á."""
        repr_result = [
            f"–ó–∞–¥–∞—á–∞ \"{task.title}\" —É–¥–∞–ª–µ–Ω–∞!",
            task
        ]
        self.manager.remove_task(task.id)
        self.status_process("üßπü™£  –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞!", task)

    def complete_task(self, task: Task) -> None:
        """ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        –∑–∞–¥–∞—á–∏ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ"""
        self.manager.complete_task(task)
        self.status_process("‚úî  –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!", task)

    def incomplete_task(self, task: Task) -> None:
        """ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        –∑–∞–¥–∞—á–∏ –Ω–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ"""
        self.manager.incomplete_task(task)
        self.status_process("üîÑ –ó–∞–¥–∞—á—É –Ω—É–∂–Ω–æ —Å–Ω–æ–≤–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å", task)

    def repr_tasks(
            self,
            tasks: list[Task],
            title: str
    ) -> str | None:
        """
        –ù–æ—Ä–º–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–∫–∞–∑ —Å–ø–∏—Å–∫–æ–≤.

        :param tasks: –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á.
        :param title: –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
        :return: –õ–∏–±–æ `choice`, –ª–∏–±–æ `None`.
        """
        if not tasks:
            repr_result = make_panel(
                Text(
                    "–ó–∞–¥–∞—á –ø–æ–∫–∞ –Ω–µ—Ç!",
                    Style(color="red")
                ),
                subtitle=False
            )
            self.console.print(repr_result)
            choice = self.console.input(const.ENTER_TO_MENU)
            return choice

        for page_num, page_tasks in enumerate(self.paginate(tasks), 1):
            self.console.clear()
            repr_result = [] # noqa
            task_map = dict()

            repr_result.append(
                "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –Ω–∏–±—É–¥—å –∏–∑ –∑–∞–¥–∞—á –∏–ª–∏ –æ–ø—Ü–∏–π, —á—Ç–æ–±—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å.",
            )

            for num, task in enumerate(page_tasks, 1):
                group = self.abb_repr_task(num, task)
                repr_result.append(
                    Padding(
                        group,
                        pad=(1, 1),
                    )
                )
                task_map[str(num)] = task

            repr_result.append(
                Text(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞: {page_num}"),
            )

            group_choices = choices_options(self.options)
            repr_result.append(
                make_panel(
                    Text.assemble(
                        ("\"\".  ", "bold bright_black"),
                        ("–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏", "white")
                    ),
                    Text.assemble(
                        (f"1-{self.limited}. ", "bold bright_black"),
                        ("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏", "white")
                    ),
                    Text.assemble(
                        ("11.  ", "bold bright_black"),
                        "–°–ª–µ–¥. —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
                    ),
                    *group_choices,
                    subtitle=False
                )
            )

            self.console.print(
                make_panel(
                    *repr_result,
                    title=title
                )
            )
            choice = str(self.console.input())
            if choice in task_map.keys():
                select_task = task_map.get(choice)
                self.repr_task_detail(task=select_task)
            elif choice in ["11"]:
                continue
            return choice

    def search_task(self) -> None:
        """
        –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–¥–∞—á –ø–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—é –ø–æ–¥—Å—Ç—Ä–æ–∫
        –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ.
        """
        self.console.print(
            make_panel(
                "–ù–∞–ø–∏—à–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –≤—Ö–æ–¥–∏—Ç—å –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏.",
                title="–ü–æ–∏—Å–∫..."
            )
        )
        find_title = self.console.input()
        finded_tasks = self.manager.find_to_entry_title(find_title)
        self.repr_tasks(finded_tasks, "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞")

    def present_cats(self) -> None:
        """
        –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
        –§—É–Ω–∫—Ü–∏—è –¥–∞–µ—Ç –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ–¥ –∏ —Å–ø–∏—Å–æ–∫
        –≤—Å–µ—Ö –∑–∞–¥–∞—á –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
        """
        while True:
            self.console.clear()
            repr_result = []
            tasks_map = self.manager.get_cats()
            cats_map = {}
            for num, cat in enumerate(tasks_map.keys(), 1):
                cats_map[str(num)] = cat
                repr_result.append(
                    Text.assemble(
                        (f"{num}) ", "bold bright_black"),
                        f"{cat}"
                    )
                )
            self.console.print(
                make_panel(
                Text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                    style=Style(color="bright_black")
                ),
                    *repr_result,
                    title="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏"
                )
            )
            choice = str(self.console.input())
            cat = cats_map.get(choice)
            tasks = tasks_map.get(cat)
            if choice == "":
                return

            if tasks is not None:
                self.repr_tasks(tasks, title=f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è \"{cat}\"")

    def present_not_comple(self) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏"""
        completed_tasks = self.manager.get_incompleted()
        self.repr_tasks(tasks=completed_tasks, title="–ó–∞–¥–∞—á–∏ –∂–¥—É—â–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")

    def add_task(self) -> None:
        """
        –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É.
        :return:
        """
        self.console.clear()

        self.console.print(
            make_panel(
                "–ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏...",
                Text(
                    "–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏, –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º",
                    style=Style(color="bright_black")
                ),
                title="–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"
            )
        )
        try:
            title = self.input_and_valid(
                prompt=const.TITLE_HELP_TEXT,
            )

            description = self.input_and_valid(
                prompt=const.DESCRIPTION_HELP_TEXT,
            )

            category = self.input_and_valid(
                prompt=const.CATEGORY_HELP_TEXT,
            )

            deadline = self.term_input_normalize(const.TERM_HELP_TEXT)

            priority = Prompt.ask(
                Text.assemble(
                    (const.PRIORITY_HELP_TEXT, "bold bright_black")
                ),
                choices=["–í—ã—Å–æ–∫–∏–π", "–°—Ä–µ–¥–Ω–∏–π", "–ù–∏–∑–∫–∏–π"],
                default="–í—ã—Å–æ–∫–∏–π"
            )

            task = Task(
                id=1,
                title=title,
                description=description,
                category=category,
                deadline=deadline,
                priority=priority,
                status=False,
            )
        except ValueError:
            return

        self.manager.add_task(task=task)
        self.status_process("üíæ –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!", task)

    def status_process(self, title: str, task: Task) -> None:
        """
        –°–æ–æ–±—â–∞–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö.
        :param title: –°–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ —ç–∫—Ä–∞–Ω.
        :param task: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º–∞—è –∑–∞–¥–∞—á–∞.
        """
        self.console.clear()
        self.console.print(
            make_panel(
                Text.assemble((title, "bold chartreuse1")),
                task
            )
        )
        self.console.input(
            Text.assemble((const.ENTER_TO_MENU, "bold grey42"))
        )

    def term_input_normalize(self, prompt: str) -> str:
        """
        –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–ª—è —Å—Ä–æ–∫–∞ –∑–∞–¥–∞—á–∏.
        :return: isoformat
        """
        while True:
            user_input = self.console.input(
                Text.assemble(
                    (prompt, "bold bright_black")
                )
            )

            match_hours = re.compile(r"h(\d+)").search(user_input)
            match_days = re.compile(r"d(\d+)").search(user_input)
            match_months = re.compile(r"m(\d+)").search(user_input)

            hours = int(match_hours.group(1)) if match_hours else 0
            days = int(match_days.group(1)) if match_days else 0
            months = int(match_months.group(1)) if match_months else 0
            days += months * 30

            if not user_input:
                self.console.print("[red]–°—Ä–æ–∫–∏ –Ω–µ –º–æ–≥—É—Ç –ø—É—Å—Ç—ã–º–∏![/red]")
            elif not match_hours and not match_days and not match_months:
                self.console.print("[red]–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç![/red]")
            else:
                term = timedelta(hours=hours, days=days)
                deadline = datetime.now() + term
                return deadline.isoformat()

    def input_and_valid(
            self,
            prompt: str,
            valid_fn: Callable[[str], bool] | None = None,
            error_message: str | None = None
    ) -> str:
        """
        –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–ø—Ä–æ—Å–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö.
        :param prompt: –ü—Ä–æ–º–ø—Ç –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç.
        :param valid_fn: –õ—è–º–±–¥–∞, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ —É—Å–ª–æ–≤–∏—è.
        :param error_message: –ü—Ä–∏ –Ω–µ—É–¥–∞—á–Ω–æ–º –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ —É—Å–ª–æ–≤–∏–π
        –≤—ã–≤–æ–¥–∏—Ç—Å—è –æ—à–∏–±–∫–∞.

        :return:
        """
        while True:
            user_input = self.console.input(
                Text.assemble(
                    (f"{prompt}", "bold bright_black")
                )
            )
            if user_input == "":
                raise ValueError()
            if valid_fn is not None:
                if valid_fn(user_input):
                    return user_input
                else:
                    self.console.print(f"[red]{error_message}[/red]")
            return user_input


    def display_task(
            self,
            task: Task,
            prompt: str,
            options: dict[str, tuple[str, Callable]]
    ) -> None:
        """
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏.
        :param task: –ó–∞–¥–∞—á–∞.
        :param prompt: –ü–æ–¥—Å–∫–∞–∑–∫–∞.
        :param options: –û–ø—Ü–∏–∏ –¥–ª—è –∑–∞–¥–∞—á–∏.
        :return:
        """
        self.console.clear()
        repr_result = [
            Text.assemble(prompt),
            task,
        ]
        info = make_panel(
            Text.assemble(
                ("\"\".  ", "bold bright_black"),
                ("–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏", "white")
            ),
            *choices_options(options),
            subtitle=False
        )
        self.console.print(
            make_panel(
                *repr_result,
                info,
                title=task.title
            )
        )
        choice = self.console.input()
        if choice in options.keys():
            _, action = options[choice]
            action(task)

    def repr_task_detail(self, task: Task):
        """
        –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–∫–∞–∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ –ø–æ–¥—Ä–æ–±–Ω–æ.
        """
        options = {
            "1": (
                "–û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º",
                self.complete_task
            ) if not task.status
            else (
                "–û—Ç–º–µ—Ç–∏—Ç—å –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º",
                self.incomplete_task
            ),
            "2": (
                "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É",
                self.edit_task,
            ),
            "3": (
                "–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É",
                self.delete_task,
            ),
        }
        self.display_task(task=task, prompt="–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∑–∞–¥–∞—á–µ", options=options)

    def edit_task(self, task: Task) -> None:
        """
        –≠–Ω–¥–ø–æ–∏–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏.
        """
        options = {
            "1": ("–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", self.change_title),
            "2": ("–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", self.change_description),
            "3": ("–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", self.change_cat),
            "4": ("–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", self.change_deadline),
            "5": ("–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç", self.change_priority),
        }
        self.display_task(task=task, prompt="–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É", options=options)

    def change_title(self, task: Task) -> None:
        """–ü—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–∏"""
        new_title = self.input_and_valid("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
        self.manager.edit_task(task, key="title", editable=new_title)
        task.title = new_title
        self.status_process("–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏!", task)

    def change_description(self, task: Task):
        """–ü—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏–∏"""
        new_description = self.input_and_valid("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
        self.manager.edit_task(task, key="description", editable=new_description)
        task.description = new_description
        self.status_process("–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏!", task)

    def change_deadline(self, task: Task):
        """–ü—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ä–æ–∫–∞"""
        new_deadline = self.term_input_normalize(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è!" + "\n" +
            const.TERM_HELP_TEXT
        )
        self.manager.edit_task(task, key="deadline", editable=new_deadline)
        task.deadline = new_deadline
        self.status_process("–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ —Å—Ä–æ–∫–∏ –∑–∞–¥–∞—á–∏!", task)

    def change_cat(self, task: Task):
        """–ü—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        new_category = self.input_and_valid("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–¥–∞—á–∏:")
        self.manager.edit_task(task, key="category", editable=new_category)
        task.category = new_category
        self.status_process("–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–¥–∞—á–∏!", task)

    def change_priority(self, task: Task):
        """–ü—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞"""
        new_priority = Prompt.ask(
                Text.assemble(
                    (const.PRIORITY_HELP_TEXT, "bold bright_black")
                ),
                choices=["–í—ã—Å–æ–∫–∏–π", "–°—Ä–µ–¥–Ω–∏–π", "–ù–∏–∑–∫–∏–π"],
                default="–í—ã—Å–æ–∫–∏–π"
            )
        self.manager.edit_task(task, key="priority", editable=new_priority)
        task.priority = new_priority
        self.status_process("–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ –ø—Ä–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏!", task)
